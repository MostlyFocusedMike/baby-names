{"version":3,"sources":["components/BabyNames.js","App.js","serviceWorker.js","index.js"],"names":["names","require","BabyNames","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleSpellChange","e","setState","defineProperty","target","name","value","handleSortChange","sort","handleSyllablesChange","syllables","handleReverseChange","prevState","reverse","reversed","syllableCheck","state","sortingMethod","a","b","rank","length","initState","spelling","_this2","react_default","createElement","id","htmlFor","type","onChange","checked","map","nameObj","toLowerCase","includes","class","React","Component","console","log","App","className","components_BabyNames","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b2ee8b76.chunk.js","sourcesContent":["import React from 'react'\n\nconst names = require('../baby-names.json')\n\nclass BabyNames extends React.Component {\n    constructor() {\n        super()\n        this.initState = {\n            names,\n            spelling: \"\",\n            sort: \"rank\",\n            reversed: false,\n            syllables: \"0\"\n        }\n        this.state = this.initState\n    }\n\n    handleSpellChange = (e) => {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSortChange = (e) => {\n        this.setState({sort: e.target.value});\n    }\n\n    handleSyllablesChange = (e) => {\n        this.setState({syllables: e.target.value});\n    }\n\n    handleReverseChange = (e) => {\n        this.setState((prevState) => (\n            {\n                names: prevState.names.reverse(),\n                reversed: !prevState.reversed\n            }\n        ));\n    }\n\n    syllableCheck = (syllables) => {\n        if (this.state.syllables == 0) {\n            return true;\n        } else {\n            if (this.state.syllables == syllables) {\n                return true;\n            }\n            return false;\n        }\n    }\n\n    sortingMethod = (a,b) => { // I know this is not the right way to sort, this is just quick and dirty\n        if (this.state.sort === 'alpha' && !this.state.reversed) {\n            if (a.name < b.name) return -1;\n            if (a.name > b.name) return 1;\n            return 0;\n        } else if (this.state.sort === 'rank' && !this.state.reversed) {\n            return a.rank - b.rank\n        } else if (this.state.sort === 'length' && !this.state.reversed) {\n            return a.name.length - b.name.length\n        } else if (this.state.sort === 'syllables' && !this.state.reversed) {\n            return a.syllables - b.syllables\n        } else if (this.state.sort === 'alpha' && this.state.reversed) {\n            if (a.name < b.name) return 1;\n            if (a.name > b.name) return -1;\n            return 0;\n        } else if (this.state.sort === 'rank' && this.state.reversed) {\n            return b.rank - a.rank\n        } else if (this.state.sort === 'length' && this.state.reversed) {\n            return b.name.length - a.name.length\n        } else if (this.state.sort === 'syllables' && this.state.reversed) {\n            return b.syllables - a.syllables\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <form>\n                    <div id=\"spelling-inputs\">\n                        <label htmlFor=\"spelling\">Names that contain: </label>\n                        <input \n                            type=\"text\"\n                            id=\"spelling\"\n                            name=\"spelling\"\n                            value={this.state.spelling}\n                            onChange={this.handleSpellChange}\n                        />\n                    </div>\n                    <div id=\"syllable-inputs\">\n                        <label htmlFor=\"syllables\">Number of syllables:</label>\n                        <select value={this.state.syllables} onChange={this.handleSyllablesChange} id=\"syllables\">\n                            <option value=\"0\">Any</option>\n                            <option value=\"5\">5</option>\n                            <option value=\"4\">4</option>\n                            <option value=\"3\">3</option>\n                            <option value=\"2\">2</option>\n                            <option value=\"1\">1</option>\n                        </select>\n                    </div>\n                    <div id=\"sorting-inputs\">\n                        <label htmlFor=\"sort\">Sort by:</label>\n                        <select value={this.state.sort} onChange={this.handleSortChange} id=\"sort\">\n                            <option value=\"rank\">Rank</option>\n                            <option value=\"alpha\">Alphabetically</option>\n                            <option value=\"length\">Length</option>\n                            <option value=\"syllables\">Syllables</option>\n                        </select>\n                    </div>\n                    <div id=\"reverse-inputs\">\n                        <label htmlFor=\"reverse\">Reverse Sort: </label>\n                        <input\n                            id=\"reverse\"\n                            name=\"reverse\"\n                            type=\"checkbox\"\n                            checked={this.state.reversed}\n                            onChange={this.handleReverseChange}\n                        />\n                    </div>\n                </form>\n                <div id=\"name-holder\">\n                    <div id=\"fake-table\"> \n                        <div id=\"t-header\">\n                            <h2>Rank</h2>\n                            <h2>Name</h2>\n                            <h2>Syllables</h2>\n                        </div>\n                        <div id=\"t-body\">\n                            {\n                                this.state.names.sort(this.sortingMethod).map(nameObj => {\n                                    if (nameObj.name.toLowerCase().includes(this.state.spelling) && this.syllableCheck(nameObj.syllables)) {\n                                        return (\n                                            <div class=\"row\">\n                                                <div class=\"data\">\n                                                    {nameObj.rank}\n                                                </div>\n                                                <div class=\"data\">\n                                                    {nameObj.name}\n                                                </div>\n                                                <div class=\"data\">\n                                                    {nameObj.syllables}\n                                                </div>\n                                            </div>\n                                        )\n                                    }\n                                })\n                            }\n                        </div>\n                    </div>\n                </div>\n\n            </div>\n        )\n    }\n}\n\nexport default BabyNames;","import React, { Component } from 'react';\nimport BabyNames from './components/BabyNames'\nimport './App.css';\n\nconst names = require('./baby-names.json')\nconsole.log('names: ', names)\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <BabyNames />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}